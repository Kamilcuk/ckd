{#-
	library for ninja templates
-#}

{#- OPS - represent possible operations #}
{% set OPS = [ "add", "sub", "mul" ] %}

{#- TYPES format: name type detect max min #}
{# BASICTYPES - the main types #}
{% set BASICTYPES = [
        ("schar",  "signed char",        "1", "SCHAR_MAX",  "SCHAR_MIN"),
        ("uchar",  "unsigned char",      "1", "UCHAR_MAX",  "0"),
        ("shrt",   "short",              "1", "SHRT_MAX",   "SHRT_MIN"),
        ("ushrt",  "unsigned short",     "1", "USHRT_MAX",  "0"),
        ("int",    "int",                "1", "INT_MAX",    "INT_MIN"),
        ("uint",   "unsigned int",       "1", "UINT_MAX",   "0"),
        ("long",   "long",               "1", "LONG_MAX",   "LONG_MIN"),
        ("ulong",  "unsigned long",      "1", "ULONG_MAX",  "0"),
        ("llong",  "long long",          "1", "LLONG_MAX",  "LLONG_MIN"),
        ("ullong", "unsigned long long", "1", "ULLONG_MAX", "0"),
    ]
%}
{-# To iterate use this:
    for N, T, DETECT, MAX, MIN in TYPES
-#}

{#- #}
{% set INT128TYPES = [
    ("int128",  "__int128",          "__SIZEOF_INT128__", "INT128_MAX",  "INT128_MIN"),
    ("uint128", "unsigned __int128", "__SIZEOF_INT128__", "UINT128_MAX", "0"),
    ]
%}

{#- TYPES - BASICTYPES + int128, so everything we can put into _Generic #}
{% set TYPES = BASICTYPES.copy() %}
{% if HAVE_UINT128 | int %}
    {% for d in INT128TYPES %}
        {% set _ = TYPES.append(d) %}
    {% endfor %}
{% endif %}

{#- ALIASEDTYPES represents all types that are aliased to basic types #}
{% set ALIASEDTYPES = [
        ("intmax",  "intmax_t",  "INTMAX_MAX",  "INTMAX_MAX",  "INTMAX_MIN"),
        ("uintmax", "uintmax_t", "UINTMAX_MAX", "UINTMAX_MAX", "0"),
        ("size",    "size_t",    "SIZE_MAX",    "SIZE_MAX",    "0"),
        ("ptrdiff", "ptrdiff_t", "PTRDIFF_MAX", "PTRDIFF_MAX", "PTRDIFF_MIN"),
        ("intptr",  "intptr_t",  "INTPTR_MAX",  "INTPTR_MAX",  "INTPTR_MIN"),
        ("uintptr", "uintptr_t", "UINTPTR_MAX", "UINTPTR_MAX", "0"),
    ]
%}
{% for N in [ 8, 16, 32, 64 ] %}
    {% for p in [ "int", "int_least", "int_fast" ] %}
        {% set P = p | upper() %}
        {% set _ = ALIASEDTYPES.append( (p~N, p~N~"_t", P~N~"_MAX", P~N~"_MAX", P~N~"_MIN") ) %}
        {% set _ = ALIASEDTYPES.append( ("u"~p~N, "u"~p~N~"_t", "U"~P~N~"_MAX", "U"~P~N~"_MAX", "0") ) %}
    {% endfor %}
{% endfor %}

{#- ALLTYPES - actually all possible types #}
{% set ALLTYPES = TYPES.copy() %}
{% for d in ALIASEDTYPES %}
    {% set _ = ALLTYPES.append(d) %}
{% endfor %}

{#- Replace $OP for operation #}
{% macro foreach_OP() %}
    {% for OP in OPS %}
        {{- caller() | replace("$OP", OP) }}
    {%- endfor %}
{% endmacro %}

{#- Replace $TYPE for operation #}
{% macro foreach_TYPE(array=TYPES, char=0, inmacro=0, end="", arg=0, repl="$TYPE", promotedonly=0, unsignedonly=0) %}
    {% set macrocontnl = (", \\\n" | format) if inmacro else "" %}
    {% set repl = repl if (repl | length) else "UNIQUE_STRING_dcf3a9ee-692e-4301-a53b-b25c1179021d" %}
    {# #}
    {% if char %}
        {% set ctx = {
            "N": "char",
            "T": "char",
            "C": "ckd_char_t",
            "IDX": -1,
            "T_IDX": 0,
            "C_IDX": 1,
            "HALFIDX": -1,
            "MAX": "CHAR_MAX",
            "MIN": "CHAR_MIN",
            "LAST": 0,
            "PROMOTED": 0,
            "SIGNED": "CHAR_MAX == SCHAR_MAX",
            "CHAR": 1,
            }
        %}
        {{- caller(ctx) | replace(repl, ctx.N) -}}
        {{- macrocontnl -}}
    {% endif %}
    {# #}
    {% for N, T, DETECT, MAX, MIN in array %}
        {% set ctx = {
            "N": N,
            "T": T,
            "C": "ckd_"~N~"_t",
            "DETECT": DETECT,
            "IDX": loop.index0,
            "T_IDX": 2 + 2 * loop.index0 + 0,
            "C_IDX": 2 + 2 * loop.index0 + 1,
            "HALFIDX": (loop.index0 / 2) | int,
            "SIGNED": (0 if MIN == "0" else 1),
            "MAX": MAX,
            "MIN": MIN,
            "LAST": loop.last,
            "PROMOTED": (loop.index0 / 2) >= 2,
            "MACRONL": macrocontnl if not loop.last else "",
            "CHAR": 0,
            }
        %}
        {% set _ = ctx.update({
            "UMAX": ctx.MAX if not ctx.SIGNED else     "UCHAR_MAX" if "schar" in ctx.N else "U"~MAX,
            "UT":     ctx.T if not ctx.SIGNED else "unsigned char" if "schar" in ctx.N else "unsigned "~ctx.T,
            "UN":     ctx.N if not ctx.SIGNED else         "uchar" if "schar" in ctx.N else "u"~ctx.N,
            "ST":     ctx.T if ctx.SIGNED else "signed char" if "uchar" in ctx.N else ( ctx.T | replace("unsigned ", "") ),
            "SN":     ctx.N if ctx.SIGNED else       "schar" if "uchar" in ctx.N else ( ctx.N | replace("u", "", 1) ),
            })
        %}
        {% set _ = ctx.update({
            "UC": "ckd_"~ctx.UN~"_t",
            "SC": "ckd_"~ctx.SN~"_t",
            })
        %}
        {% if (not promotedonly or ctx.PROMOTED) and (not unsignedonly or not ctx.SIGNED) %}
            {{- caller(ctx) | replace(repl, N) -}}
            {{- macrocontnl if not loop.last else end -}}
        {% endif %}
    {%- endfor %}
{% endmacro -%}

{#- vim: autoindent nosmartindent ft=
-#}
